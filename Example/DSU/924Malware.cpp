class DSU {
    vector<int> parent, compSize;
    int comp;
    
public:
    DSU(int n) {
        this->comp = n;
        parent.resize(n);
        compSize.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            compSize[i] = 1;
        }
    }
    
    int findParent(int x) {
        if (parent[x] == x) {
            return x;
        }
        return parent[x] = findParent(parent[x]);
    }
    
    bool performUnion(int x, int y) {       
        x = findParent(x); 
        y = findParent(y);
        
        if (x == y) {
            return false;
        }
        
        if (compSize[x] > compSize[y]) {
            compSize[x] += compSize[y];
            parent[y] = x;
        } else {
            compSize[y] += compSize[x];
            parent[x] = y;
        }
        
        comp--;
        return true;
    }

    int sizeOfComponent(int x) {
        return compSize[findParent(x)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DSU dsu(n);
        
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j]) {
                    dsu.performUnion(i, j);
                }
            }
        }
        
        vector<int> malwareCount(n, 0);
        for (int node : initial) {
            malwareCount[dsu.findParent(node)]++;
        }
        for(auto it: malwareCount)
            cout<<it<<' ';
        
        sort(initial.begin(), initial.end());  
        int bestNode = initial[0];
        int maxSaved = 0;
        
        for (int node : initial) {
            int root = dsu.findParent(node);
            if (malwareCount[root] == 1) {  // 1 infected node in this component
                int saved = dsu.sizeOfComponent(root);
                if (saved > maxSaved) {
                    maxSaved = saved;
                    bestNode = node;
                }
            }
        }
        
        return bestNode;
    }
};
